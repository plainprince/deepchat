// The module 'vscode' contains the VS Code extensibility API

const { default: ollama } = require('ollama');
// const { showCompletion, typeInCompletion, hideCompletion } = require('./completions.js');

// Import the module and reference it with the alias vscode in your code below
const vscode = require('vscode');

// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed

/**
 * @param {vscode.ExtensionContext} context
 */
function activate(context) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('DeepChat activated...');

	let model = {name: 'deepseek-r1:8b'}

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with  registerCommand
	// The commandId parameter must match the command field in package.json
	let disposable = vscode.commands.registerCommand('deepchat.openChat', function () {
		const panel = vscode.window.createWebviewPanel(
			'deepchat',
			'DeepChat',
			vscode.ViewColumn.Two,
			{ enableScripts: true }
		)

		panel.webview.html = /*html*/`
            <!DOCTYPE html>
			<html lang="en">
			<head>
				<meta charset="UTF-8">
				<meta http-equiv="X-UA-Compatible" content="IE=edge">
				<meta name="viewport" content="width=device-width, initial-scale=1.0">
				<title>DeepChat</title>
				<style>
					#response {
						display: grid;
						grid-template-rows: repeat(auto-fit, minmax(1.5em, auto));
						transition: grid-template-rows 0.3s ease-out;
					}

					.think {
						max-width: 70vw;    /* Set your desired maximum width */
						white-space: nowrap;  /* Prevents text from wrapping to a new line */
						overflow: hidden;     /* Hides any content that overflows */
						text-overflow: ellipsis; /* Adds the ellipsis (...) when text is truncated */
						color: gray;
					}

					.think p {
						margin: 0;
						padding: 0;
						display: inline-block; /* Makes paragraphs appear in a single line */
					}

					.think:hover {
						max-height: none; /* Expand fully */
						white-space: normal;
						max-width: 100%;
					}

					.think:hover p {
						white-space: normal;
					}

					hr {
						display: block;
						width: 100%;
						margin: 20px 0; /* Reset default margin */
					}

					
.chat-container {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    display: flex;
    align-items: center;
    padding: 10px;
    background: white;
    border-top: 1px solid #ddd;
    gap: 10px;
	background-color: inherit;
}

#chat {
    flex: 1;
    max-height: 1.5rem;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 8px;
    resize: none;
    overflow-y: auto;
    font-size: 16px;
	max-width: 75%;
}

#send {
    background: #007aff;
    color: white;
    border: none;
    padding: 10px 15px;
	right: 0;
    border-radius: 8px;
    font-size: 18px;
    cursor: pointer;
    transition: background 0.2s ease-in-out;
}

#send:hover {
    background: #005ecb;
}

#send:active {
    background: #004a9f;
}

@media (max-width: 500px) {
    .chat-container {
        padding: 8px;
    }

    #chat {
        font-size: 14px;
    }

    #send {
        font-size: 16px;
        padding: 8px 12px;
    }
}

body {
	margin-bottom: 2rem;
}
				</style>
			</head>
			<body>
				<h1>DeepChat</h1>
				<div id="response"></div><br>

				<div class="chat-container">
					<textarea id="chat" cols="30" rows="10"></textarea><br>
					<button id="send">Send</button>
				</div>

				<script src="data:text/javascript;base64,"></script>
				<script>
const vscode = acquireVsCodeApi();

let sendBtn = document.querySelector('#send');
let chatInput = document.querySelector('#chat');
let responseDiv = document.querySelector('#response');
let infoDiv = document.querySelector('#info');

let canSendMessage = true;
let fullResponse = '';
let responseEl = document.createElement('p');

function escapeHTML(text) {
	return text.replace(/[&<>"']/g, function(match) {
		switch(match) {
			case "&": return "&amp;";
			case "<": return "&lt;";
			case ">": return "&gt;";
			case '"': return "&quot;";
			case "'": return "&#39;";
			default: return match;
		}
	});
}

function processMarkdownWithThink(inputMarkdown) {
    let openThinkTag = false; // Track if <think> is open
    let processedMarkdown = '';

    // Process line by line to track unclosed <think> tags
    inputMarkdown.split('\\n').forEach(line => {
        if (line.includes('<think>')) {
            openThinkTag = true;
            line = line.replace('<think>', '<div class="think">');
        }
        if (line.includes('</think>')) {
            openThinkTag = false;
            line = line.replace('</think>', '</div>');
        }
        processedMarkdown += line + '\\n';
    });

    // Auto-close unclosed <think> tag at the end
    if (openThinkTag) {
        processedMarkdown += '</div>\\n';
    }

    // Convert Markdown to HTML using marked
    return marked.parse(processedMarkdown);
}

sendBtn.addEventListener('click', () => {
	if (canSendMessage) {
		canSendMessage = false;
		let message = chatInput.value.trim();
		console.log(message);
		chatInput.value = '';

		let el = document.createElement('p');
		el.textContent = '>>> ' + message;
		if (message) {
			responseDiv.appendChild(el);
			responseDiv.appendChild(responseEl);
			vscode.postMessage({ command: 'chat', text: message });
			window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
		}
	}
})

window.addEventListener('message', event => {
	if (event.data.command === 'response') {
		fullResponse += event.data.text;

		responseEl.innerHTML = processMarkdownWithThink(fullResponse);
	}

	if(event.data.command === 'done') {
		canSendMessage = true;
		responseDiv.appendChild(document.createElement('hr'));
		responseEl = document.createElement('p');
		fullResponse = '';
	}
})



				</script>
			</body>
			</html>
		`

		let messages = [
			{ role: 'user', content: 'System: You are a helpful AI assistant. You always think before saying something, no matter what.' }
		]

		panel.webview.onDidReceiveMessage(async message => {
			if (message.command === "chat") {
				const prompt = message.text;
				messages.push({ role: 'user', content: 'User: ' + prompt });
				let response = '';

				try {
					const streamResponse = await ollama.chat({
						model: model.name,
						messages,
						stream: true
					});

					console.log(streamResponse);

					for await (const part of streamResponse) {
						response += part.message.content;
						console.log(part.message.content);
						panel.webview.postMessage({ command: 'response', text: part.message.content });
					}

					messages.push({ role: 'user', content: 'Assistant: ' + response });
					panel.webview.postMessage({ command: 'done' });
				} catch (error) {
					panel.webview.postMessage({ command: 'response', message: 'System: A fatal error has occured.' });
					messages.push({ role: 'user', content: 'System: A fatal error has occured.' });
					panel.webview.postMessage({ command: 'done' });
				}
			}
			if (message.command === "log") {
				console.log(message.text);
			}
		})
	});

	context.subscriptions.push(disposable);

	disposable = vscode.commands.registerCommand('deepchat.set8b', function () {
		vscode.window.showInformationMessage('Set model to deepseek-r1:8b');
		model.name = 'deepseek-r1:8b';
	})
	context.subscriptions.push(disposable);

	disposable = vscode.commands.registerCommand('deepchat.set32b', function () {
        vscode.window.showInformationMessage('Set model to deepseek-r1:32b');
        model.name = 'deepseek-r1:32b';
    })
	context.subscriptions.push(disposable);

	disposable = vscode.commands.registerCommand('deepchat.set1.5b', function () {
        vscode.window.showInformationMessage('Set model to deepseek-r1:1.5b');
        model.name = 'deepseek-r1:1.5b';
    })
	context.subscriptions.push(disposable);
/* 
	vscode.workspace.onDidChangeTextDocument(async (event) => {
        const editor = vscode.window.activeTextEditor;
        if (!editor || editor.document !== event.document) return;

		hideCompletion();

        // Trigger completion when user types
        if (event.contentChanges.length > 0) {
            showCompletion(model.name);
        }
    });

    disposable = vscode.commands.registerCommand('deepchat.triggerCompletion', () => {
		hideCompletion();
		showCompletion(model.name);
	});
	context.subscriptions.push(disposable);
	
	disposable = vscode.commands.registerCommand('deepchat.acceptCompletion', () => {
		typeInCompletion();
		hideCompletion();
	});
	context.subscriptions.push(disposable); */
}

// This method is called when your extension is deactivated
function deactivate() { }

module.exports = {
	activate,
	deactivate
}
